all things we writle in console.log()
console.log('Teaching the world how to code'.length) - print 30
console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true
console.log('    Remove whitespace   '.trim()); // Prints without space
console.log(Math.random()); // Prints a random number between 0 and 1

Math.floor(Math.random() * 50); - Math.floor()берет десятичное число и округляет до ближайшего целого числа.

console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50

console.log(Math.ceil(43.8)); // prints the smallest integer greater than or equal to x.
console.log(Number.isInteger(2017)); // проверяет целое ли число
///////////////////////////////////////////////////////////////////////////

var favoriteFood = 'pizza'; - переменная (хз пока, видимо ее нельзя редачиить)

let meal = 'Enchiladas'; - эту переменную можно редачить
console.log(meal); // Output: Enchiladas
meal = 'Burrito';
console.log(meal); // Output: Burrito

const myName = 'Gilberto'; - константа, тут нечего сказать. Значение обязательно!
console.log(myName); // Output: Gilberto

let a = 10;
a++;
console.log(a); // Output: 11
let b = 20;
b--;
console.log(b); // Output: 19

let favoriteAnimal = 'cat';
console.log('My favorite animal: ' + favoriteAnimal);

let myName = 'Boris';
let myCity = 'Kazan';
console.log(`My name is ${myName}. My favorite city is ${myCity}`);

const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string

///////////////////////////////////////////////////////////////////////////////////////
const Kelvin = 0; //line
const celsius = Kelvin - 273; // line2

let fahrenheit = celsius * (9/5) + 32; //line3
fahrenheit = Math.floor(fahrenheit); // line4

console.log(`The temperature is ${fahrenheit} degrees Fahrenheit.`);
////////////////////////////////////////////////////////////////////////////////////////

let sale = true;
sale = false;
if(sale) {
  console.log('Time to buy!');
} else {
  console.log('Time to wait for a sale.')
}


let hungerLevel = 7;
if (hungerLevel > 7){
  console.log('Time to eat!');
} else {
  console.log('We can eat later!');
}

&& - means AND
if (stopLight === 'green' && pedestrians === 0) { 
  console.log('Go!');
} else {
  console.log('Stop');
}

|| - means OR
if (day === 'Saturday' || day === 'Sunday') {
  console.log('Enjoy the weekend!');
} else {
  console.log('Do some work.');
}

! - means NOT
let excited = true;
console.log(!excited); // Prints false
 
let sleepy = false;
console.log(!sleepy); // Prints true

///////////////////////
let numberOfApples = 0;
if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
}
 
// Prints 'No apples left!'
когда переменная = false
1) 0
2) Пустые строки вроде ""или''
3) null которые представляют, когда нет никакой ценности
4) undefined которые представляют, когда объявленной переменной не хватает значения
5) NaN, или не число
///////////////////////

let tool = 'marker';

let writingUtensil = tool || 'pen';
if (tool) {
  writingUtensil = tool;
} else {
  writingUtensil = 'pen';
}

console.log(`The ${writingUtensil} is mightier than the sword.`);
/////////////////////////

This construction might be uesd like if/else
условие, ?, исходы при тру и фолс

1)let isLocked = false;
isLocked ? console.log('You will need a key to open the door.') : console.log('You will not need a key to open the door.');

2)let isCorrect = true;
isCorrect ? console.log('Correct!') : console.log('Incorrect!');

3)let favoritePhrase = 'Love That!';
favoritePhrase === 'Love That!' ? console.log('I love that!') : console.log("I don't love that!");
///////////////////////////

elif construction

let season = 'summer';

if (season === 'spring') {
  console.log('It\'s spring! The trees are budding!');
} else if (season === 'winter') {
  console.log('It\'s winter! Everything is covered in snow.');
} else if (season === 'fall') {
  console.log('It\'s fall! Leaves are falling!');
} else if (season === 'summer') {
  console.log('It\'s sunny and warm because it\'s summer!');
} else {
  console.log('Invalid season.');
}
////////////////////////////

SWITCH:

let groceryItem = 'papaya';
 
switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default: - important! (if we cant find current item, this line use a default value)
    console.log('Invalid item');
    break;
}
//////////////////////////////////
let userName = '';

userName ? console.log(`Hello, ${userName}!`) : console.log('Hello');

const userQuestion = 'Will I become a werewolf tonight?';
console.log(`User asked: ${userQuestion}`);

const randomNumber = Math.floor(Math.random() * 8);
let eightBall = '';
switch (randomNumber){
  case 0:
    eightBall = 'It is certain';
    break;
  case 1:
    eightBall = 'It is decidedly so';
    break;
  case 2:
    eightBall = 'Reply hazy try again';
    break;
  case 3:
    eightBall = 'Cannot predict now';
    break;
  case 4:
    eightBall = 'Do not count on it';
    break;
  case 5:
    eightBall = 'My sources say no';
    break;
  case 6:
    eightBall = 'Outlook not so good';
    break;
  case 7:
    eightBall = 'Signs point to yes';
    break;
}
console.log(eightBall)
//////////////////////////////////////////

FUNCTIONS:

function sayThanks(){ 
  console.log('Thank you for your purchase! We appreciate your business.'); - the body
}
sayThanks(); - to print result of our function
//////////
function sayThanks(name) {
  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');
}

sayThanks('Cole');
/////////
function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}
 
greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!
/////////
function monitorCount(rows, columns){
  return rows*columns;
}
const numOfMonitors = monitorCount(5,4);
console.log(numOfMonitors)
////////
function monitorCount(rows, columns) {
  return rows * columns;
}
function costOfMonitors(rows, columns){
  return monitorCount(rows, columns) * 200;
}
const totalCost = costOfMonitors(5,4);
console.log(totalCost);
////////
const plantNeedsWater = function(day){
  if (day === 'Wednesday'){
    return true;
  } else {
    return false;
  }
};

console.log(plantNeedsWater('Tuesday')); // output false
////////
const plantNeedsWater = (day) => { // if we dont want to write word function, we can use => after arguments.
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
}; // same function like previos
////////
this one like 2 previos:

const plantNeedsWater = day => day === 'Wednesday' ? true : false;
////////
if we have function like this, we can use 2) view
1)
const squareNum = (num) => {
  return num * num;
};
2)
const squareNum = num => num * num;

But if we have 0 or 2 and more, we have to use (argument1...)
////////
ARRAYS:

const hobbies = ['qwe', 'asd', 'zxc'];
console.log(hobbies);
///////

const famousSayings = ['Fortune favors the brave.', 'A joke is a very serious thing.', 'Where there is love there is life.'];
const listItem = famousSayings[0];
console.log(listItem);
console.log(famousSayings[2]);
//////

let condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];
const utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];

condiments[0] = 'Mayo';
console.log(condiments);
condiments = ['Mayo'];
console.log(condiments);

utensils[3] = 'Spoon';
console.log(utensils);
utensils = ['qwe'];
console.log(utensils); // error because of CONST
//////

const objectives = ['Learn a new languages', 'Read 52 books', 'Run a marathon']; //length
console.log(objectives.length);
//////

const itemTracker = ['item 0', 'item 1', 'item 2'];
itemTracker.push('item 3', 'item 4');
console.log(itemTracker);  // Output: ['item 0', 'item 1', 'item 2', 'item 3', 'item 4'];
//////

const newItemTracker = ['item 0', 'item 1', 'item 2'];
const removed = newItemTracker.pop();
 
console.log(newItemTracker);    // Output: [ 'item 0', 'item 1' ]
console.log(removed);    // Output: item 2
//////

const groceryList = ['orange juice', 'bananas', 'coffee beans', 'brown rice', 'pasta', 'coconut oil', 'plantains'];

groceryList.shift(); // delete first item
console.log(groceryList);

groceryList.unshift('popcorn'); // add item in the begining of the array
console.log(groceryList);

console.log(groceryList.slice(1, 4)); // remove items by ids first - start id, sec value - end id + 1. But orig array will be the same.
console.log(groceryList);

const pastaIndex = groceryList.indexOf('pasta'); // give us index of choosen item
console.log(pastaIndex); 

secretMessage.splice(6,12, 'know'); - уже удаляет из массива эти индексы и заменяет их на 3е значение, тут вместо 5 он ставит 1.
console.log(secretMessage.join(' ')); - соединяем с пробелом все эл. массива

const countries = ['Japan', 'Denmark', 'Mexico', 'Morocco'];
countries.shift();
console.log(countries); // ['Denmark', 'Mexico', 'Morocco']
//////

const flowers = ['peony', 'daffodil', 'marigold'];
 
const concept = ['arrays', 'can', 'be', 'mutated'];

function changeArr(arr){
  arr[3] = 'MUTATED';
}
changeArr(concept);
console.log(concept); // [ 'arrays', 'can', 'be', 'MUTATED' ]

function removeElement(newArr){
  newArr.pop();
}
removeElement(concept);
console.log(concept); // [ 'arrays', 'can', 'be' ]
///////

Nested Arrays <----------------------------

const nestedArr = [[1], [2, 3]];
 
console.log(nestedArr[1]); // Output: [2, 3]
console.log(nestedArr[1][0]); // Output: 2
/////////

LOOPS:

FOR:
// usual for
for (let counter = 0; counter < 4; counter++) {
  console.log(counter);
}

// reverse for
for (let counter = 3; counter >= 0; counter--){
  console.log(counter);
}

// loop with array

const animals = ['Grizzly Bear', 'Sloth', 'Sea Lion'];
for (let i = 0; i < animals.length; i++){
  console.log(animals[i]);
}

// Nested Loops

let bobsFollowers = ['Joe', 'Marta', 'Sam', 'Erin'];
let tinasFollowers = ['Sam', 'Marta', 'Elle'];
let mutualFollowers = [];

for (let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers.length; j++) {
    if (bobsFollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
};

// WHILE

const cards = ['diamond', 'spade', 'heart', 'club'];

let currentCard;
while (currentCard !== 'spade') {
  currentCard = cards[Math.floor(Math.random() * 4)];
  console.log(currentCard);
}

// do...while

let cupsOfSugarNeeded = 2;
let cupsAdded = 0;

do{ - do always do this tasks ones even if the condition is false
  cupsAdded++;
  console.log(cupsAdded);
} while (cupsAdded < cupsOfSugarNeeded);

// break

const rapperArray = ["Lil' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];

for (let i = 0; i < rapperArray.length; i++){
  console.log(rapperArray[i]);
  if (rapperArray[i] === "Notorious B.I.G."){
    break;
  }
}
//////////////
FUNCTIONS

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
}
const is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;

is2p2();
console.log(is2p2.name);

/////
Функции как параметры

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
};

const addTwo = num => num + 2;

const timeFuncRuntime = funcParameter => {
  let t1 = Date.now();
  funcParameter();
  let t2 = Date.now();
  return t2 - t1;
};


const time2p2 = timeFuncRuntime(checkThatTwoPlusTwoEqualsFourAMillionTimes);

const checkConsistentOutput = (func, val) => {
  let first = func(val);
  let second = func(val);
  if (first === second){
    return first;
  } else {
    return 'This function returned inconsistent results';
  }
}

checkConsistentOutput(addTwo, 2);

///

Iterators

////////// .forEach()
1)
const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

fruits.forEach(fruitsitem => console.log('I want to eat a ' + fruitsitem));
2)
function printGrocery(element){
  console.log(element);
}
 
groceries.forEach(printGrocery);

////////// .map()

const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

const secretMessage = animals.map(animal => {
  return animal[0];
});
console.log(secretMessage.join(''));

////

const bigNumbers = [100, 200, 300, 400, 500];

const smallNumbers = bigNumbers.map(num => {
  return num/100;
});
console.log(smallNumbers);

/////////// .filter()

const randomNumbers = [375, 200, 3.14, 7, 13, 852];

const smallNumbers = randomNumbers.filter(num => {
  return num < 250;
});
////
const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];

const longFavoriteWords = favoriteWords.filter( word => {
  return word.length > 7;
});

/////////// .findIndex()

const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];


const foundAnimal = animals.findIndex(animal => {
  return animal === 'elephant';
});

const startsWithS = animals.findIndex(animal => {
  return animal[0] === 's';
});


//////////// .reduce()

const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
}, 10); // <- Second argument for .reduce()

console.log(newSum); // output with 10: 26, without: 16

////////////

const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

console.log(words.some((word) => {
  return word.length < 6;
}));

const interestingWords = words.filter(word => {
  return word.length > 5;
});

console.log(interestingWords.every((word) => {return word.length > 5} ));

///////////////////////////////////////////////////
const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama'];

const nums = [1, 50, 75, 200, 350, 525, 1000];

//  Choose a method that will return undefined
cities.forEach(city => console.log('Have you visited ' + city + '?'));

// Choose a method that will return a new array
const longCities = cities.filter(city => city.length > 7);

// Choose a method that will return a single value
const word = cities.reduce((acc, currVal) => {
  return acc + currVal[0]
}, "C");

console.log(word)

// Choose a method that will return a new array
const smallerNums = nums.map(num => num - 5);

// Choose a method that will return a boolean value
nums.every(num => num < 0);
////////////////////////////////////////////////////

OBJECTS

let fasterShip = {
  'Fuel Type': 'Turbo Fuel',
  color: 'silver'
};
////
1-st type
let spaceship = {
  homePlanet: 'Earth',
  color: 'silver'
};
spaceship.homePlanet; // Returns 'Earth',
spaceship.color; // Returns 'silver',
////
2-nd type

let spaceship = {
  'Fuel Type': 'Turbo Fuel',
  'Active Duty': true,
  homePlanet: 'Earth',
  numCrew: 5
};
spaceship['Active Duty'];   // Returns true
spaceship['Fuel Type'];   // Returns  'Turbo Fuel'
spaceship['numCrew'];   // Returns 5
spaceship['!!!!!!!!!!!!!!!'];   // Returns undefined

///let returnAnyProp = (objectName, propName) => objectName[propName]; 
returnAnyProp(spaceship, 'homePlanet'); // Returns 'Earth'///

///////// add/delete
add
const spaceship = {type: 'shuttle'};

spaceship.type = 'alien'; // Changes the value of the type property
spaceship.speed = 'Mach 5'; // Creates a new key of 'speed' with a value of 'Mach 5'

delete
const spaceship = {
  'Fuel Type': 'Turbo Fuel',
  homePlanet: 'Earth',
  mission: 'Explore the universe' 
};
 
delete spaceship.mission;  // Removes the mission property
/////////////////////////////////////////////////////////////
methods:

const alienShip = {
  invade () { 
    console.log('Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.')
  }
};
alienShip.invade(); // Prints 'Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.'
////

let retreatMessage = 'We no longer wish to conquer your planet. It is full of dogs, which we do not care for.';

const alienShip = {
  retreat() {
    console.log(retreatMessage)
  },
  takeOff() {
    console.log('Spim... Borp... Glix... Blastoff!')
  }
};

alienShip.retreat();
alienShip.takeOff();
////////////

const spaceship = {
     telescope: {
        yearBuilt: 2018,
        model: '91031-XLT',
        focalLength: 2032 
     },
    crew: {
        captain: { 
            name: 'Sandra', 
            degree: 'Computer Engineering', 
            encourageTeam() { console.log('We got this!') } 
         }
    },
    engine: {
        model: 'Nimbus2000'
     },
     nanoelectronics: {
         computer: {
            terabytes: 100,
            monitors: 'HD'
         },
        'back-up': {
           battery: 'Lithium',
           terabytes: 50
         }
    }
}; 
spaceship.nanoelectronics['back-up'].battery; // Returns 'Lithium'

////////////////////////////////////////////////////////////////////////

let spaceship = {
  passengers: [{boy: 'popik'}],
  telescope: {
    yearBuilt: 2018,
    model: "91031-XLT",
    focalLength: 2032 
  },
  crew: {
    captain: { 
      name: 'Sandra', 
      degree: 'Computer Engineering', 
      encourageTeam() { console.log('We got this!') },
     'favorite foods': ['cookies', 'cakes', 'candy', 'spinach'] }
  },
  engine: {
    model: "Nimbus2000"
  },
  nanoelectronics: {
    computer: {
      terabytes: 100,
      monitors: "HD"
    },
    'back-up': {
      battery: "Lithium",
      terabytes: 50
    }
  }
}; 


let capFave = spaceship.crew.captain['favorite foods'][0];

let firstPassenger = spaceship.passengers[0];

//////////////////////////////////////////////////////////////////

Links:

const spaceship = {
  homePlanet : 'Earth',
  color : 'silver'
};
 
let paintIt = obj => {
  obj.color = 'glorious gold'
};
 
paintIt(spaceship);
 
spaceship.color // Returns 'glorious gold'
///////////////

let spaceship = {
  'Fuel Type' : 'Turbo Fuel',
  homePlanet : 'Earth'
};

// Write your code below

let greenEnergy = obj => {
  obj['Fuel Type'] = 'avocado oil';
}

let remotelyDisable = obj => {
  obj.disabled = true;
}

greenEnergy(spaceship);
remotelyDisable(spaceship);
console.log(spaceship);// { 'Fuel Type': 'avocado oil', homePlanet: 'Earth', disabled: true }
////////////////////////

for...in:

let spaceship = {
  crew: {
    captain: { 
      name: 'Lily', 
      degree: 'Computer Engineering', 
      cheerTeam() { console.log('You got this!') } 
    },
    'chief officer': { 
      name: 'Dan', 
      degree: 'Aerospace Engineering', 
      agree() { console.log('I agree, captain!') } 
    },
    medic: { 
      name: 'Clementine', 
      degree: 'Physics', 
      announce() { console.log(`Jets on!`) } },
    translator: {
      name: 'Shauna', 
      degree: 'Conservation Science', 
      powerFuel() { console.log('The tank is full!') } 
    }
  }
}; 
 
// for...in

let spaceship = {
    crew: {
    captain: { 
        name: 'Lily', 
        degree: 'Computer Engineering', 
        cheerTeam() { console.log('You got this!') } 
        },
    'chief officer': { 
        name: 'Dan', 
        degree: 'Aerospace Engineering', 
        agree() { console.log('I agree, captain!') } 
        },
    medic: { 
        name: 'Clementine', 
        degree: 'Physics', 
        announce() { console.log(`Jets on!`) } },
    translator: {
        name: 'Shauna', 
        degree: 'Conservation Science', 
        powerFuel() { console.log('The tank is full!') } 
        }
    }
}; 

for (let member in spaceship.crew) {
  console.log(`${member} : ${spaceship.crew[member].name}`)
}

for (let member in spaceship.crew) {
  console.log(`${spaceship.crew[member].name} : ${spaceship.crew[member].degree}`);
}


/////////////////////////
THIS

const goat = {
  dietType: 'herbivore',
  makeSound() {
    console.log('baaa');
  },
  diet() {
    console.log(this.dietType); <-------- this, without it we cant use objects in goat
  }
};
 
goat.diet(); 
// Output: herbivore
/////
const robot = {
  model: '1E78V2',
  energyLevel: 100,
  provideInfo() {
    return `I am ${this.model} and my current energy level is ${this.energyLevel}.`
  }
};

console.log(robot.provideInfo());
////////////////////////

Конфиденциальность

const bankAccount = {
  _amount: 1000 // we use "_", if we dont want to change value of this obj
}

getters:

const person = {
  _firstName: 'John',
  _lastName: 'Doe',
  get fullName() {
    if (this._firstName && this._lastName){
      return `${this._firstName} ${this._lastName}`;
    } else {
      return 'Missing a first name or a last name.';
    }
  }
}
  
console.log(person.fullName); // 'John Doe'
//
const robot = {
  _model: '1E78V2',
  _energyLevel: 100,
  get energyLevel(){
    if (typeof this._energyLevel === 'number'){
      return `My current energy level is ${this._energyLevel}`
    }else{
      return 'System malfunction: cannot retrieve energy level'
    }
  }
};

console.log(robot.energyLevel);
////

setters:

const person = {
  _age: 37,
  set age(newAge){
    if (typeof newAge === 'number'){
      this._age = newAge;
    } else {
      console.log('You must assign a number to age');
    }
  }
};
person.age = 40;
console.log(person._age); // Logs: 40
person.age = '40'; // Logs: You must assign a number to age
///
const robot = {
  _model: '1E78V2',
  _energyLevel: 100,
  _numOfSensors: 15,
  get numOfSensors(){
    if(typeof this._numOfSensors === 'number'){
      return this._numOfSensors;
    } else {
      return 'Sensors are currently down.'
    }
  },
  set numOfSensors(num){
    if (typeof num === 'number' && num >= 0){
     this._numOfSensors = num;
    }else{
      console.log('Pass in a number that is greater than or equal to 0');
    }
  }
};

robot.numOfSensors = 100;
console.log(robot.numOfSensors);
//
factory-functions:

const monsterFactory = (name, age, energySource, catchPhrase) => {
  return { 
    name: name,
    age: age, 
    energySource: energySource,
    scare() {
      console.log(catchPhrase);
    } 
  }
};
const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!');
ghost.scare(); // 'BOO!'


const robotFactory = (model, mobile) => {
  return {
    model: model,
    mobile: mobile,
    beep() {
      console.log('Beep Boop');
    }
  };
};

const tinCan = robotFactory('P-500', true);
tinCan.beep();
///
prop-val-shorthand:

const monsterFactory = (name, age) => {
  return { 
    name,
    age 
  }
};

function robotFactory(model, mobile){
  return {
    model,
    mobile,
    beep() {
      console.log('Beep Boop');
    }
  }
}

const newRobot = robotFactory('P-501', false)
console.log(newRobot.model)
console.log(newRobot.mobile)

///
destruct-assign:

const vampire = {
  name: 'Dracula',
  residence: 'Transylvania',
  preferences: {
    day: 'stay inside',
    night: 'satisfy appetite'
  }
};

const { residence } = vampire; 
console.log(residence); // Prints 'Transylvania'

const { day } = vampire.preferences; 
console.log(day); // Prints 'stay inside'

//////////////
const robot = {
  model: '1E78V2',
  energyLevel: 100,
  functionality: {
    beep() {
      console.log('Beep Boop');
    },
    fireLaser() {
      console.log('Pew Pew');
    },
  }
};

const { beep } = robot.functionality;
beep();
//////
object-methods:

const robot = {
	model: 'SAL-1000',
  mobile: true,
  sentient: false,
  armor: 'Steel-plated',
  energyLevel: 75
};

// What is missing in the following method call?
const robotKeys = Object.keys(robot); - ключи на вывод

console.log(robotKeys);

// Declare robotEntries below this line:
const robotEntries = Object.entries(robot) - печатает робота
console.log(robotEntries);

// Declare newRobot below this line:
const newRobot = Object.assign({laserBlaster: true, voiceRecognition: true}, robot); <--- крч, чтобы не  изменять робот конст, ставим его на последнее место. Вначале стоит то, что мы туда запихиваем

console.log(newRobot);













